"use strict";
(function () {
    const RealTimeView = function () {
        return new RealTimeView.init();
    }
    RealTimeView.init = function () {
        $D.init.call(this);
        this.arrRealTimeList = [];
        this.arrRealTimeListDataBelow = [];
        this.arrDataRealTime = "";
        this.$tblRealTimeData = "";
        this.$MixerNameValidation = "Mixer 7";
        this.$MixerNameListData = [];
        this.$MixerCountList = 0;
        this.$MixerValidateCounter = 1;
    }
    RealTimeView.prototype = {
        drawDatatables: function () {
            var self = this;
            if (!$.fn.DataTable.isDataTable('#tblRealTimeData')) {
                self.$tblRealTimeData = $('#tblRealTimeData').DataTable({
                    processing: true,
                    serverSide: true,
                    select: true,
                    "order": [[0, "asc"]],
                    "pageLength": 480,
                    "ajax": {
                        "url": "/Reports/RealTimeReportViewing/GetRealTimeViewingResult",
                        "type": "POST",
                        "data": function (d) {
                            d.MixerName = self.$MixerNameValidation;
                        },
                        "datatype": "json",
                    },
                    dataSrc: "data",
                    scrollY: '100%', scrollX: '100%',
                    columns: [
                        { title: "No Data", data: "ID", visible: false },
                        { title: "No Data", data: "NoData" },
                        { title: "GridData", data: "GridData" },
                        { title: "Temp", data: "Temp" },
                        { title: "Elec", data: "Elec" },
                        { title: "Water", data: "Water" },
                    ],
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('data-id', data.ID);
                    }
                });
            }
            return this;
        },
        getMachineListData: function () {
            var self = this;
            self.formAction = '/Reports/RealTimeReportViewing/GetMachineListDataList';
            self.sendData().then(function () {
                $.each(self.responseData.MachineDataList, function (e) {
                    var selfData = this;
                    self.$MixerNameListData.push(selfData.Text);
                })
            });
            return this;
        }
    };
    RealTimeView.init.prototype = $.extend(RealTimeView.prototype, $D.init.prototype);
    RealTimeView.init.prototype = RealTimeView.prototype;
    $(document).ready(function () {
        var RealTime = RealTimeView();
        RealTime.drawDatatables();
        RealTime.getMachineListData();
        var InitializePerMinute = setTimeout(PerMinuteRefreshData, 1000);
        var InitializePer5Minute = setTimeout(Per5MinuteRefreshData, 1000);
        function PerMinuteRefreshData() {
            RealTime.$tblRealTimeData.ajax.reload(null, false);
            InitializePerMinute = setTimeout(PerMinuteRefreshData, 60000);
        }
        function Per5MinuteRefreshData() {
            var TotalMachineList = RealTime.$MixerNameListData.length;

            if (TotalMachineList === (RealTime.$MixerCountList + 1)) {
                RealTime.$MixerCountList = 0;
            }
            RealTime.$MixerNameValidation = RealTime.$MixerNameListData[RealTime.$MixerCountList];
            $("#MixerNameData").html(RealTime.$MixerNameValidation);
            RealTime.$tblRealTimeData.ajax.reload(null, false);
            InitializePerMinute = setTimeout(Per5MinuteRefreshData, 300000);
            if (RealTime.$MixerValidateCounter !== 1) {
                RealTime.$MixerCountList++;
            }
            RealTime.$MixerValidateCounter++;
        }
        RealTime.$tblRealTimeData.on('draw.dt', function () {
            $("#live-updated-chart").remove();
            var vhtml = "";
            vhtml += "<div id='live-updated-chart' class='height-sm'></div>";
            $("#graphbody").append(vhtml);


            CUI.dataTableID = "#tblRealTimeData";
            CUI.setDatatableMaxHeightFixed();
            var tbldata = RealTime.getDataTableData(RealTime.$tblRealTimeData.rows().data());
            var tbldatalength = tbldata.length;
            var FirstCounterData = 0;
            var FirstTempCounterData = 0;
            var FirsttempElectData = [];
            var FirsttempTempData = [];
            var FirsttempElectResultData = [];

            var FirsttempTempResultData = [];
            var FirsttempDataValidation = [];
            var FirsttempFinalData = [];
            var HoldThirdCondition = [];
            var HoldThirdConditionResultData = [];
            var SecondtempElectData = [];
            var SecondtempTempData = [];
            var SecondtempElectResultData = [];
            var SecondtempTempResultData = [];
            var SecondtempDataValidation = [];
            var SecondtempFinalData = [];

            if (tbldatalength === 0) {
                $("#NoDataDisplay").removeAttr("hidden", "hidden");
                $("#latestTempWaterDate").html("");
                $("#latestWater").html("");
                $("#latestTemperature").html("");
                $("#latestElectric").html("");
            }
            else {
                $("#NoDataDisplay").attr("hidden", true);
                //First Condition
                //Get First 12 Data in a row in all condition
                if (tbldata.length <= 15) {

                }
                else {
                    for (var nhi = 0; nhi < 15; nhi++) {

                        SecondtempElectData.push(tbldata[(tbldata.length - 1) - FirstCounterData].Elec);
                        SecondtempTempData.push(tbldata[(tbldata.length - 1) - FirstCounterData].Temp);
                        FirstCounterData++;
                    }
                }
                if (tbldata.length <= 2) {

                }
                else {
                    for (var firstemp = 0; firstemp < 2; firstemp++) {
                        FirsttempElectData.push(tbldata[(tbldata.length - 1) - FirstTempCounterData].Elec);
                        FirsttempTempData.push(tbldata[(tbldata.length - 1) - FirstTempCounterData].Temp);
                        HoldThirdCondition.push(tbldata[(tbldata.length - 1) - FirstTempCounterData].Temp);
                        FirstTempCounterData++;
                    }
                }
                for (var HoldC = 0; HoldC < HoldThirdCondition.length; HoldC++) {
                    if (FirsttempTempData[HoldC] >= 80) {
                        HoldThirdConditionResultData.push(1)
                    }
                }
                for (var TempLoopi = 0; TempLoopi < FirsttempTempData.length; TempLoopi++) {
                    if (FirsttempTempData[TempLoopi] >= 60) {
                        FirsttempTempResultData.push(1)
                    }
                    else {
                        FirsttempTempResultData.push(0)
                    }
                }
                for (var TempLoopTempi = 0; TempLoopTempi < FirsttempElectData.length; TempLoopTempi++) {
                    if (FirsttempElectData[TempLoopTempi] === 0) {
                        FirsttempElectResultData.push(1)
                    }
                    else {
                        FirsttempElectResultData.push(0)
                    }
                }
                //Second
                for (var SecondTempLoopi = 0; SecondTempLoopi < SecondtempTempData.length; SecondTempLoopi++) {
                    if (SecondtempTempData[SecondTempLoopi] <= 59) {
                        SecondtempTempResultData.push(1)
                    }
                }
                for (var SecondTempLoopTempi = 0; SecondTempLoopTempi < SecondtempElectData.length; SecondTempLoopTempi++) {
                    if (SecondtempElectData[SecondTempLoopTempi] === 0) {
                        SecondtempElectResultData.push(1)
                    }
                    else {
                        SecondtempElectResultData.push(0)
                    }
                }
                //Check Each Data
                //First
                for (var CheckDup = 0; CheckDup < FirsttempTempResultData.length; CheckDup++) {
                    if ((FirsttempTempResultData[CheckDup] && FirsttempElectResultData[CheckDup]) == 1) {
                        FirsttempDataValidation.push(1)
                    }
                    else {
                        FirsttempDataValidation.push(0)
                    }
                }
                //Second
                for (var SecondCheckDup = 0; SecondCheckDup < SecondtempTempResultData.length; SecondCheckDup++) {
                    if ((SecondtempTempResultData[SecondCheckDup] && SecondtempElectResultData[SecondCheckDup]) == 1) {
                        SecondtempDataValidation.push(1)
                    }
                    else {
                        SecondtempDataValidation.push(0)
                    }
                }
                //Find 
                //First
                for (var BOP = 0; BOP < FirsttempDataValidation.length; BOP++) {
                    if (FirsttempDataValidation[BOP] === 0) {
                        FirsttempFinalData.push(1);
                    }
                }
                //Second
                for (var SecondBOP = 0; SecondBOP < SecondtempDataValidation.length; SecondBOP++) {
                    if (SecondtempDataValidation[SecondBOP] === 0) {
                        SecondtempFinalData.push(1);
                    }
                }
                //Check Validation
                //First

                var tempTemperatureData = [];
                var tempWaterData = [];
                var tempDateData = [];
                var tempElecDateData = [];
                var tempElecData = [];
                for (var TempData = 0; TempData < tbldatalength; TempData++) {
                    tempTemperatureData.push(tbldata[TempData].Temp);
                    tempWaterData.push(tbldata[TempData].Water);
                    tempDateData.push(tbldata[TempData].GridData);
                    tempElecData.push(tbldata[TempData].Elec);
                    tempElecDateData.push(tbldata[TempData].TempElecGridData);

                }

                var LineChartConfiguration = {
                    chart: {
                        height: 500,
                        type: 'line',
                        shadow: {
                            enabled: true,
                            color: COLOR_GREEN_LIGHTER,
                            top: 18,
                            left: 7,
                            blur: 10,
                            opacity: 1
                        },
                        toolbar: {
                            show: false
                        }
                    },
                    colors: [COLOR_RED_LIGHTER, "rgba(0,121,250,0.55)", COLOR_GREEN_LIGHTER],
                    dataLabels: {
                        enabled: false,
                    },
                    stroke: {
                        curve: 'smooth',
                        width: 5
                    },
                    fill: {
                        type: 'solid',
                        opacity: [0.35, 1],
                    },
                    series: [{
                        name: 'Temperature',
                        type: 'area',
                        data: tempTemperatureData

                    }, {
                        name: 'Water',
                        type: 'area',
                        data: tempWaterData
                    }, {
                        name: 'Electricity',
                        type: 'area',
                        data: tempElecData
                    }],
                    grid: {
                        row: {
                            colors: [COLOR_SILVER_TRANSPARENT_1, 'transparent'],
                            opacity: 0.5
                        },
                    },

                    xaxis: {
                        categories: tempDateData,
                        labels: {
                            show: false
                        },
                        axisBorder: {
                            show: true,
                            color: COLOR_SILVER_TRANSPARENT_5,
                            height: 2,
                            width: '100%',
                            offsetX: 0,
                            offsetY: -1
                        },
                        axisTicks: {
                            show: true,
                            borderType: 'solid',
                            color: COLOR_SILVER,
                            height: 6,
                            offsetX: 0,
                            offsetY: 0
                        }
                    },
                    yaxis: [{
                        min: 20,
                        max: 120,
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: COLOR_RED_LIGHTER
                        },
                        labels: {
                            style: {
                                color: COLOR_RED_LIGHTER
                            }
                        },
                        title: {
                            text: "Celcius",
                            style: {
                                color: COLOR_RED_LIGHTER
                            }
                        },
                        tooltip: {
                            enabled: true
                        }

                    }, {
                        min: 0,
                        max: 400,
                        seriesName: 'Water',
                        opposite: true,
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: COLOR_BLUE_LIGHTER
                        },
                        labels: {
                            style: {
                                color: COLOR_BLUE_LIGHTER
                            }
                        },
                        title: {
                            text: "Liters",
                            style: {
                                color: COLOR_BLUE_LIGHTER
                            }
                        },
                    }, {
                        min: 0,
                        max: 350,
                        seriesName: 'Ampere',
                        opposite: true,
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: COLOR_GREEN_LIGHTER
                        },
                        labels: {
                            style: {
                                color: COLOR_GREEN_LIGHTER
                            }
                        },
                        title: {
                            text: "Ampere",
                            style: {
                                color: COLOR_GREEN_LIGHTER
                            }
                        },
                    }],
                    legend: {
                        show: true,
                        position: 'top',
                        offsetY: -20,
                        horizontalAlign: 'right',
                        floating: true,
                    }
                };
                var LineChartView = new ApexCharts(document.querySelector('#live-updated-chart'), LineChartConfiguration);
                LineChartView.render();
                $("#latestWater").text(tbldata[tbldata.length - 1].Water);
                $("#latestTemperature").text(tbldata[tbldata.length - 1].Temp);
                $("#latestTempWaterDate").text(tbldata[tbldata.length - 1].ElecGridData);
                $("#latestTempWaterDate1").text(tbldata[tbldata.length - 1].ElecGridData);
                $("#latestElectric").text(tbldata[tbldata.length - 1].Elec);
                if (FirsttempFinalData.length === 0) {
                    var vhtml = "";
                    $("#NotificationLabel").val("");
                    vhtml = "";
                    $("#mdlSampleData").modal('hide');
                    vhtml = "The mixer is not working";
                    $("#NotificationLabel").html(vhtml);
                    $("#mdlSampleData").modal('show');
                }
                else if (SecondtempFinalData.length === 0) {
                    var vhtml = "";
                    $("#NotificationLabel").val("")
                    $("#mdlSampleData").modal('hide');
                    vhtml += "Process is completed";
                    $("#NotificationLabel").html(vhtml);
                    $("#mdlSampleData").modal('show');
                }
                else if (tbldata[tbldata.length - 1].Temp >= 100) {
                    var vhtml = "";
                    $("#NotificationLabel").val("")
                    $("#mdlSampleData").modal('hide');
                    vhtml += "Newest temp. is 100℃ above";
                    $("#NotificationLabel").html(vhtml);
                    $("#mdlSampleData").modal('show');
                }
                else if (tbldata[tbldata.length - 1].Elec >= 30) {
                    var vhtml = "";
                    $("#NotificationLabel").val("")
                    $("#mdlSampleData").modal('hide');
                    vhtml += "Newest electrical current is overcurrent";
                    $("#NotificationLabel").html(vhtml);
                    $("#mdlSampleData").modal('show');
                }
                else if (HoldThirdConditionResultData.length === 2) {
                    var vhtml = "";
                    $("#NotificationLabel").val("")
                    $("#mdlSampleData").modal('hide');
                    vhtml += "Newest temp. is 80℃ above";
                    $("#NotificationLabel").html(vhtml);
                    $("#mdlSampleData").modal('show');
                }
                else {
                    $("#NotificationLabel").val("")
                    $("#mdlSampleData").modal('hide');

                }
            }
        });
        $("#btnViewModal").click(function () {
            $("#mdlSampleData").modal('show');
        });
    });
})();
