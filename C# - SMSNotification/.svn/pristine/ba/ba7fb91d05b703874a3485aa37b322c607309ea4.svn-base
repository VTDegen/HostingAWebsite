using Kedica.Areas.Documents.Models;
using Kedica.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web.Mvc;

namespace Kedica.Areas.Documents.Controllers
{
    public class UserManualController : Controller
    {
        DataHelper dataHelper = new DataHelper();
        List<string> modelErrors = new List<string>();
        bool error = false;
        string errmsg = "";
        // GET: Documents/UserManual
        public ActionResult Index()
        {
            return View("UserManual");
        }
        public ActionResult GetUserManualList()
        {
            List<tUserManual> data = new List<tUserManual>();
            DataTableHelper TypeHelper = new DataTableHelper();

            int start = Convert.ToInt32(Request["start"]);
            int length = Convert.ToInt32(Request["length"]);
            string searchValue = Request["search[value]"];
            string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][data]"];
            string sortDirection = Request["order[0][dir]"];

            try
            {
                using (MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["SHIN-ETSU-MYSQL"].ConnectionString.ToString()))
                {
                    conn.Open();
                    using (MySqlCommand cmdMySql = conn.CreateCommand())
                    {
                        cmdMySql.CommandType = CommandType.StoredProcedure;
                        cmdMySql.CommandText = "UserManual_GetList";
                        using (MySqlDataReader sdr = cmdMySql.ExecuteReader())
                        {
                            while (sdr.Read())
                            {
                                data.Add(new tUserManual
                                {
                                    ID = Convert.ToInt32(sdr["ID"]),
                                    FileName = sdr["FileName"].ToString(),
                                    FileDocumentName = sdr["FileDocumentName"].ToString()
                                });
                            }
                        }
                    }
                    conn.Close();
                }
            }
            catch (Exception err)
            {
                string errmsg;
                if (err.InnerException != null)
                    errmsg = "An error occured: " + err.InnerException.ToString();
                else
                    errmsg = "An error occured: " + err.ToString();

                return Json(new { success = false, msg = errmsg }, JsonRequestBehavior.AllowGet);
            }
            int totalrows = data.Count;
            if (!string.IsNullOrEmpty(searchValue))//filter
                data = data.Where(x =>
                    x.FileDocumentName.ToLower().Contains(searchValue.ToLower()) ||
                    x.FileName.ToString().Contains(searchValue.ToLower())
                ).ToList<tUserManual>();

            int totalrowsafterfiltering = data.Count;
            if (sortDirection == "asc")
                data = data.OrderBy(x => TypeHelper.GetPropertyValue(x, sortColumnName)).ToList();

            if (sortDirection == "desc")
                data = data.OrderByDescending(x => TypeHelper.GetPropertyValue(x, sortColumnName)).ToList();

            data = data.Skip(start).Take(length).ToList<tUserManual>();

            return Json(new { data = data, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfiltering }, JsonRequestBehavior.AllowGet);
        }

    }
}
