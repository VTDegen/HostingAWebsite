'use strict';
(function () {
    const HydrationProcess = function () {
        return new HydrationProcess.init();
    }
    HydrationProcess.init = function () {
        $D.init.call(this);
        this.$tblHydrationProcess = "";
        this.$tblHourlyChecking = "";
        this.$tblAfterCycle = "";
        this.$tblProcessList = "";
        this.$AfterCycleCounter = 0;
        this.$MixerStartTime = "";
        this.$AfterCheckStartTime = "";
        this.$HydrationStatus = "";
        this.$HydrationCycleStatus = "";
        this.$AfterCycleLimit = "";
        this.$HourlyCheckLimit = "";
        this.templateID = 0;
        this.MixingTimeFinishedData = "";
        this.TotalInputData = 0;
        this.LatestMixingTimeStart = "";
        this.HourlyRetrieveList = 1;
        this.IsSavedData = true;
        this.TemporarySaveHourlyChecking = [];
        this.TemporarySaveAfterFinishedCycle = [];
        this.GlobalHydrationID = 0;
        this.HourlyCheckMainListData = [];
        this.iSGetHourlyCheckMainListData = true;
        this.CurrentProcessDate = "";
        this.$tblHourlyCheckingHistory = "";
        this.$tblAfterCycleHistory = "";
        this.HourlyCheckingHistoryList = [];
        this.AfterCycleHistoryList = [];
    };
    HydrationProcess.prototype = {
        drawDatatables: function () {
            var self = this;
            if (!$.fn.DataTable.isDataTable('#tblHydrationProcess')) {
                self.$tblHydrationProcess = $('#tblHydrationProcess').DataTable({
                    processing: true,
                    serverSide: true,
                    select: true,
                    "order": [[6, "asc"]],
                    "pageLength": 25,
                    "ajax": {
                        "url": "/Transaction/HydrationProcess/GetHydrationProcessList",
                        "type": "POST",
                        "datatype": "json",
                    },
                    dataSrc: "data",
                    scrollY: '100%', scrollX: '100%',
                    columns: [
                        { title: "Mixer No", data: "MixerNoValue" },
                        { title: "Cycle", data: "CycleValue" },
                        {
                            title: "Process Date", data: "ProcessDate", render: function (data) {
                                return $F(data).formatDate("mm/dd/yyyy");
                            }
                        },
                        { title: "Production Staff", data: "ProductionStaffValue" },
                        { title: "Process Code", data: "ProcessCode" },
                        { title: "Remarks", data: "Remarks" },
                        { title: "status", visible: false, data: "IsCompleted" },
                    ],
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('data-id', data.ID);
                        if (data.IsCompleted == 1) {
                            $(row).addClass('success');
                        }
                    }
                });
            }
            if (!$.fn.DataTable.isDataTable('#tblHourlyChecking')) {
                self.$tblHourlyChecking = $('#tblHourlyChecking').DataTable({
                    dataSrc: [],
                    "bPaginate": false,
                    "bLengthChange": false,
                    "bFilter": false,
                    "ordering": false,
                    "bInfo": false,
                    columns: [
                        {
                            title: "Hourly Checking", data: "CycleCount"
                        },
                        {
                            title: "Time", data: "Interval", render: function (data, type, row, meta) {
                                if (self.$HydrationStatus === "edit") {
                                    self.$HourlyCheckLimit = row.Interval;
                                    if (self.$HydrationCycleStatus === "edit") {
                                        return " <div class='input-group bootstrap-timepicker timepicker'><input type='hidden'  id='TimeIntervalCounter" + row.HCounter + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeIntervalCounter ' value='" + row.Interval + "'  data-id='" + row.ID + "' > <input type='text' id='TimeInterval" + row.ID + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeInterval input-small hastimepicker hourlytimepicker' value='" + self.$MixerStartTime + "'  data-id='" + row.ID + "' disabled >   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";
                                    }
                                    else {
                                        return " <div class='input-group bootstrap-timepicker timepicker'><input type='hidden'  id='TimeIntervalCounter" + row.HCounter + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeIntervalCounter ' value='" + row.Interval + "'  data-id='" + row.ID + "' > <input type='text' id='TimeInterval" + row.ID + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeInterval input-small hastimepicker hourlytimepicker' value='" + self.$MixerStartTime + "'  data-id='" + row.ID + "' disabled>   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";
                                    }

                                }
                                else {
                                    self.$HourlyCheckLimit = row.Interval;
                                    return " <div class='input-group bootstrap-timepicker timepicker'><input type='hidden' id='TimeIntervalCounter" + row.HCounter + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeIntervalCounter ' value='" + row.Interval + "'  data-id='" + row.ID + "' > <input type='text' id='TimeInterval" + row.ID + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeInterval input-small hastimepicker hourlytimepicker' value='" + self.$MixerStartTime + "'  data-id='" + row.ID + "'disabled >   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";

                                }
                            }
                        },
                        {
                            title: "Temp (40-75 C)", data: "TempCut", render: function (data, type, row, meta) {
                                if (self.$HydrationStatus === "edit") {
                                    if (self.$HydrationCycleStatus === "edit") {
                                        return "<input type='text' disabled id='TempCut" + row.ID + "'   class='form-control TempCut'  data-id='" + row.ID + "'   >";
                                    }
                                    else {
                                        return "<input type='text' disabled id='TempCut" + row.ID + "' value='" + row.HitTemp + "'   class='form-control TempCut'  data-id='" + row.ID + "'   >";
                                    }


                                }
                                else {
                                    return "<input type='text' disabled id='TempCut" + row.ID + "'   class='form-control TempCut'  data-id='" + row.ID + "'   >";
                                }

                            }
                        },
                        {
                            title: "Water (L)", data: "TempCut", render: function (data, type, row, meta) {
                                if (self.$HydrationStatus === "edit") {
                                    if (self.$HydrationCycleStatus === "edit") {
                                        return "<input type='text' disabled id='WaterData" + row.ID + "'   class='form-control WaterData'  data-id='" + row.ID + "'   >";
                                    }
                                    else {
                                        return "<input type='text' disabled id='WaterData" + row.ID + "' value='" + row.WaterTemp + "'   class='form-control WaterData'  data-id='" + row.ID + "'   >";
                                    }
                                }
                                else {
                                    return "<input type='text' disabled id='WaterData" + row.ID + "'   class='form-control WaterData'  data-id='" + row.ID + "'   >";
                                }

                            }
                        },

                    ],
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('data-id', data.ID);

                    }
                })

            }
            if (!$.fn.DataTable.isDataTable('#tblAfterCycle')) {
                self.$tblAfterCycle = $('#tblAfterCycle').DataTable({
                    dataSrc: [],
                    "bPaginate": false,
                    "bLengthChange": false,
                    "bFilter": false,
                    "ordering": false,
                    "bInfo": false,
                    columns: [
                        {
                            title: "After Finished Cycle", data: "CycleCount", render: function (data, type, row, meta) {
                                if (row.CycleCount === 1) {
                                    var MinsDisplay = "";
                                    if (row.Interval === 60) {
                                        MinsDisplay = "1 hr.";
                                    }
                                    else {
                                        MinsDisplay = row.Interval + "mins.";
                                    }
                                    return row.CycleCount + " (" + MinsDisplay + " After Finished Cycle)";

                                }
                                else {
                                    self.$AfterCycleCounter++;
                                    if (row.Interval === 60) {
                                        MinsDisplay = "1 hr.";
                                    }
                                    else {
                                        MinsDisplay = row.Interval + "mins.";
                                    }
                                    return row.CycleCount + " (" + MinsDisplay + "After " + self.$AfterCycleCounter + " Finished Cycle)";

                                }
                            }
                        },
                        {
                            title: "Time", data: "Interval", render: function (data, type, row, meta) {
                                if (self.$HydrationStatus === "edit") {
                                    self.$AfterCycleLimit = row.Interval;
                                    return " <div class='input-group bootstrap-timepicker timepicker'><input type='hidden' disabled id='TimeIntervalAFCCounter" + row.ID + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeIntervalAFCCounter ' value='" + row.Interval + "'  data-id='" + row.ID + "' > <input type='text' id='TimeIntervalAC" + row.ID + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeIntervalAC input-small hastimepicker ACtimepicker'  data-id='" + row.ID + "'  disabled>   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";
                                }
                                else {
                                    self.$AfterCycleLimit = row.Interval;
                                    return " <div class='input-group bootstrap-timepicker timepicker'><input type='hidden' id='TimeIntervalAFCCounter" + row.ID + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeIntervalAFCCounter ' value='" + row.Interval + "'  data-id='" + row.ID + "' > <input type='text' id='TimeIntervalAC" + row.ID + "' data-id=" + row.ID + " data-cycle=" + row.Interval + "  class='form-control TimeIntervalAC input-small hastimepicker ACtimepicker' value='" + self.$AfterCheckStartTime + "'  data-id='" + row.ID + "'  disabled>   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";
                                }

                            }
                        },
                        {
                            title: "Temp", data: "TempCut", render: function (data, type, row, meta) {
                                if (self.$HydrationStatus === "edit") {
                                    return "<input type='text' disabled  value='" + row.HitTemp + "' id='TempCutAC" + row.ID + "'   class='form-control TempCutAC'  data-id='" + row.ID + "'   >";
                                }
                                else {
                                    return "<input type='text' disabled id='TempCutAC" + row.ID + "'   class='form-control TempCutAC'  data-id='" + row.ID + "'   >";
                                }

                            }
                        },
                        {
                            title: "Result (OK/NG)", data: "TempLimit", render: function (data, type, row, meta) {
                                if (self.$HydrationStatus === "edit") {

                                    return "<input type='text' disabled value='" + row.Judgement + "' id='ResultData" + row.ID + "'    class='form-control ResultData'  data-id='" + row.ID + "'   >";
                                }
                                else {
                                    return "<input type='text' disabled id='ResultData" + row.ID + "'   class='form-control ResultData'  data-id='" + row.ID + "'   >";
                                }
                            }
                        },

                    ],
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('data-id', data.ID);

                    }
                })

            }
            if (!$.fn.DataTable.isDataTable('#tblProcessList')) {
                self.$tblProcessList = $('#tblProcessList').DataTable({
                    dataSrc: [],
                    "bPaginate": false,
                    "bLengthChange": false,
                    "bFilter": false,
                    "ordering": false,
                    "bInfo": false,
                    columns: [
                        {
                            title: "Process List", data: "ProcessValue"
                        },
                        {
                            title: "Process Data", data: "ID", render: function (data, type, row, meta) {
                                if (self.$HydrationStatus === "edit") {
                                    if (row.Datatype === "int") {
                                        if (row.ProcessID === 2 || row.ProcessID === 7 || row.ProcessID === 23 || row.ProcessID === 24) {
                                            self.TotalInputData += parseInt(row.ProcessDataValue);
                                        }
                                        return "<input type='number' disabled id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "   class='form-control ProcessList processlistdata' value=" + row.ProcessDataValue + "  data-id='" + row.ID + "'   >";
                                    }
                                    else if (row.Datatype === "decimal") {
                                        return "<input type='text' disabled id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "   class='form-control ProcessList processlistdata' value=" + row.ProcessDataValue + "  data-id='" + row.ID + "'  data-parsley-pattern='^[0-9]*\.[0-9]{2}$' data-parsley-validation-threshold='1' data-parsley-debounce='500' data-parsley-type='number' data-parsley-trigger='keyup'  data-parsley-errors-container='#err-ProcessList" + row.ID + "'  > <div id='err-ProcessList" + row.ID + "'></div>";
                                    }
                                    else if (row.Datatype === "time") {
                                        if (row.ProcessID === 25 || row.ProcessID === 10) {
                                            return " <div class='input-group bootstrap-timepicker timepicker'><input type='text' id='MixerTimeStart' data-cycle=" + row.ProcessID + "  value=" + row.ProcessDataValue + "  class='form-control MixerTimeStart input-small hastimepicker processlistdata'  data-id='" + row.ID + "' disabled>   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";
                                            self.$MixerStartTime = $("#MixerTimeStart").val();
                                        }
                                        else {
                                            return " <div class='input-group bootstrap-timepicker timepicker'><input type='text' disabled id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "    class='form-control ProcessList input-small hastimepicker processlistdata'  data-id='" + row.ID + "' >   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";

                                        }

                                    }
                                    else if (row.Datatype === "text") {
                                        if (row.ProcessID === 2 || row.ProcessID === 7 || row.ProcessID === 23 || row.ProcessID === 24) {
                                            self.TotalInputData += parseInt(row.ProcessDataValue);
                                        }
                                        return "<input type='text' disabled id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "  class='form-control ProcessList processlistdata' value=" + row.ProcessDataValue + "  data-id='" + row.ID + "'   >";
                                    }
                                    else if (row.Datatype === "date") {
                                        return "<input type='text' disabled id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "  class='form-control ProcessList IsDate processlistdata' value=" + row.ProcessDataValue + "  data-id='" + row.ID + "'   >";
                                    }

                                }
                                else {
                                    if (row.Datatype === "int") {
                                        return "<input type='number' id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "  class='form-control ProcessList processlistdata'   data-id='" + row.ID + "'   >";
                                    }
                                    else if (row.Datatype === "text") {
                                        return "<input type='text' id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "  class='form-control ProcessList processlistdata'   data-id='" + row.ID + "'   >";
                                    }
                                    else if (row.Datatype === "decimal") {
                                        return "<input type='text' id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "  class='form-control ProcessList processlistdata'   data-id='" + row.ID + "'  data-parsley-pattern='^[0-9]*\.[0-9]{2}$' data-parsley-validation-threshold='1' data-parsley-debounce='500' data-parsley-type='number' data-parsley-trigger='keyup'  data-parsley-errors-container='#err-ProcessList" + row.ID + "'  > <div id='err-ProcessList" + row.ID + "'></div>";
                                    }
                                    else if (row.Datatype === "date") {
                                        return "<input type='text' id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "  class='form-control ProcessList IsDate processlistdata'   data-id='" + row.ID + "'   >";
                                    }
                                    else if (row.Datatype === "time") {
                                        if (row.ProcessID === 25 || row.ProcessID === 10) {

                                            return " <div class='input-group bootstrap-timepicker timepicker'><input type='text' id='MixerTimeStart' data-cycle=" + row.ProcessID + "  class='form-control MixerTimeStart input-small hastimepicker processlistdata'  data-id='" + row.ID + "' >   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";
                                            self.$MixerStartTime = $("#MixerTimeStart").val();
                                        }
                                        else {
                                            return " <div class='input-group bootstrap-timepicker timepicker'><input type='text' id='ProcessList" + row.ID + "' data-cycle=" + row.ProcessID + "  class='form-control ProcessList input-small hastimepicker processlistdata'  data-id='" + row.ID + "' >   <span class='input-group-addon'><i class='fa fa-clock'></i></span></div>";
                                        }
                                    }
                                }

                            }
                        },
                    ],
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('data-id', data.ID);

                    }
                })

            }
            if (!$.fn.DataTable.isDataTable('#tblHourlyCheckingHistory')) {
                self.$tblHourlyCheckingHistory = $('#tblHourlyCheckingHistory').DataTable({
                    dataSrc: [],
                    "bPaginate": false,
                    "bLengthChange": false,
                    "bFilter": false,
                    "ordering": false,
                    "bInfo": false,
                    columns: [
                        {
                            title: "Hourly Checking", data: "CycleCount"
                        },
                        {
                            title: "Time Setup", data: "Interval", render: function (data, type, row, meta) {
                                return "<input type='text' disabled id='HCTimeSetup" + row.ID + "' value='" + row.TimeSetup + "'   class='form-control TimeSetup'  data-id='" + row.ID + "'   >";
                            }
                        },
                        {
                            title: "Temp (40-75 C)", data: "TempCut", render: function (data, type, row, meta) {
                                return "<input type='text' disabled id='HCTemperatureSetup" + row.ID + "' value='" + row.HeatTemp + "'   class='form-control TemperatureSetup'  data-id='" + row.ID + "'   >";

                            }
                        },
                        {
                            title: "Water (L)", data: "TempCut", render: function (data, type, row, meta) {
                                return "<input type='text' disabled id='HCWaterSetup" + row.ID + "' value='" + row.WaterTemp + "'   class='form-control WaterSetup'  data-id='" + row.ID + "'   >";
                            }
                        },
                    ],
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('data-id', data.ID);

                    }
                })

            }
            if (!$.fn.DataTable.isDataTable('#tblAfterCycleHistory')) {
                self.$tblAfterCycleHistory = $('#tblAfterCycleHistory').DataTable({
                    dataSrc: [],
                    "bPaginate": false,
                    "bLengthChange": false,
                    "bFilter": false,
                    "ordering": false,
                    "bInfo": false,
                    columns: [

                        {
                            title: "After Finished Cycle", data: "CycleCount"
                        },
                        {
                            title: "Time Setup", data: "Interval", render: function (data, type, row, meta) {
                                return "<input type='text' disabled id='ACTimeSetup" + row.ID + "' value='" + row.TimeCheck + "'   class='form-control TimeSetup'  data-id='" + row.ID + "'   >";
                            }
                        },
                        {
                            title: "Temp", data: "TempCut", render: function (data, type, row, meta) {
                                return "<input type='text' disabled id='ACTemperatureSetup" + row.ID + "' value='" + row.TempCheck + "'   class='form-control TemperatureSetup'  data-id='" + row.ID + "'   >";

                            }
                        },
                        {
                            title: "Result(OK/NG)", data: "TempCut", render: function (data, type, row, meta) {
                                return "<input type='text' disabled id='ACJudgementSetup" + row.ID + "' value='" + row.Judgement + "'   class='form-control JudgementSetup'  data-id='" + row.ID + "'   >";
                            }
                        },
                    ],
                    "createdRow": function (row, data, dataIndex) {
                        $(row).attr('data-id', data.ID);

                    }
                })

            }
            return this;
        },
        cancelHydrationForm: function () {
            var self = this;
            self.clearFromData("frmHydration");
            $("#btnSaveHydration .btnLabel").text(" Save");
            $("#mdlHydrationTitle").text(" Create Hydration");
            $("#mdlHydration").modal("hide");
            $("#ProcessCode").attr("readonly", true);
            $('#ProcessDate').attr("readonly", false);
            $('#MixerNo,#Cycle,#ProductionStaff').prop("disabled", false);
            $("#HydrationID").val(0);
            self.$AfterCycleCounter = 0;
            self.$MixerStartTime = "";
            self.$HydrationStatus = "";
            self.$HydrationCycleStatus = "";
            self.IsSavedData = true;
            self.GlobalHydrationID = 0;

            self.HourlyRetrieveList = 1;
            self.TemporarySaveHourlyChecking = [];
            self.TemporarySaveAfterFinishedCycle = [];
            self.HourlyCheckMainListData = [];
            self.CurrentProcessDate = "";

            self.iSGetHourlyCheckMainListData = true;
            self.$tblHourlyChecking.clear();
            self.$tblHourlyChecking.draw();

            self.$tblAfterCycle.clear();
            self.$tblAfterCycle.draw();


            return this;
        },
        cancelHydrationTbl: function () {
            var self = this;
            $('#btnEditHydrationProcess').attr("disabled", "disabled");
            $('#btnDeleteHydrationProcess').attr("disabled", "disabled");
            return this;
        },
        saveHydration: function (ProcessData, HourlyChecking, AfterFinished, HydrationHeader, HydrationSummary) {
            var self = this;
            self.jsonData = { ProcessData: ProcessData, Hydration: HydrationHeader, HourlyCheckList: HourlyChecking, AfterFinishedList: AfterFinished, HydrationListSummary: HydrationSummary };
            self.formAction = '/Transaction/HydrationProcess/SaveHydrationProcess';
            self.sendData().then(function () {
                self.$tblHydrationProcess.ajax.reload(null, false);
                self.cancelHydrationTbl();
                self.cancelHydrationForm();
            });

            return this;
        },
        editHydration: function () {
            var self = this;
            self.hydrationID = self.$tblHydrationProcess.rows({ selected: true }).data()[0].ID;
            self.GlobalHydrationID = self.$tblHydrationProcess.rows({ selected: true }).data()[0].ID;
            self.templateID = $("#TemplateData").val();
            self.jsonData = { ID: self.hydrationID, TemplateID: self.templateID };
            self.formAction = '/Transaction/HydrationProcess/GetHydrationDetails';
            self.sendData().then(function () {
                var Type = '';

                if (self.responseData.isFoundTransactionHistory === 0) {
                    Type = 'old';
                }
                else {
                    Type = 'new';
                }
                self.populateHydrationData(self.responseData.hydrationData);
                self.populateEditProcessList(self.responseData.HydrationProcessData);
                self.populateEditHourlyChecking(self.responseData.HydrationHourlyData, self.responseData.HydrationAfterCycleData, Type);
                self.populateEditSummary(self.responseData.HydrationSummaryData, self.responseData.CurrentProcessDate, self.responseData.hydrationData);
            });
            return this;
        },
        populateHydrationData: function (hydrationData) {
            var self = this;
            $("#frmHydration").parsley().reset();
            $("#btnSaveHydration .btnLabel").text(" Update");
            $("#mdlHydrationTitle").text(" Edit Hydration");
            var MixerNoOption = new Option(hydrationData.MixerNoValue, hydrationData.MixerNo, true, true);
            $('#MixerNo').append(MixerNoOption).trigger('change');
            $("#MixerNoHiddenData").val(hydrationData.MixerNo);
            var CycleOption = new Option(hydrationData.CycleValue, hydrationData.Cycle, true, true);
            $('#Cycle').append(CycleOption).trigger('change');
            $("#CycleHiddenData").val(hydrationData.Cycle)
            $("#ProcessDate").val($F(hydrationData.ProcessDate).formatDate("mm/dd/yyyy"));
            var StaffOption = new Option(hydrationData.ProductionStaffValue, hydrationData.ProductionStaff, true, true);
            $('#ProductionStaff').append(StaffOption).trigger('change');
            $('#ProductionStaffHiddenData').val(hydrationData.ProductionStaff);
            $("#ProcessCode").val(hydrationData.ProcessCode);
            $("#Remarks").val(hydrationData.Remarks);
            $("#HydrationID").val(hydrationData.ID);
            $('#ProcessDate').attr("readonly", true);
            $('#MixerNo,#Cycle,#ProductionStaff').prop("disabled", true);
            $("#mdlHydration").modal('show');
            return this;
        },
        deleteHydration: function () {
            var self = this;
            self.hydrationID = self.$tblHydrationProcess.rows({ selected: true }).data()[0].ID;
            self.formAction = '/Transaction/HydrationProcess/DeleteHydration';
            self.jsonData = { ID: self.hydrationID };
            self.sendData().then(function () {
                self.$tblHydrationProcess.ajax.reload(null, false);
                self.cancelHydrationTbl();
                self.cancelHydrationForm();
            });
            return this;
        },
        getHourlyCheckingList: function () {
            var self = this;
            self.templateID = $("#TemplateData").val();
            self.jsonData = { ID: self.templateID };
            self.formAction = '/Transaction/HydrationProcess/GetHourlyCheckingDetails';
            self.sendData().then(function () {
                self.populateHourlyChecking(self.responseData.HourlyProcess);
                self.populateAfterCycle(self.responseData.AfterFinishedCycle);
                self.populateProcessList(self.responseData.ProcessList);
            });
            return this;
        },
        populateHourlyChecking: function (hydrationData) {
            var self = this;
            self.$tblHourlyChecking.clear();
            self.$tblHourlyChecking.rows.add(hydrationData);
            self.$tblHourlyChecking.draw();
            return this;
        },
        populateAfterCycle: function (hydrationData) {
            var self = this;
            self.$tblAfterCycle.clear();
            self.$tblAfterCycle.rows.add(hydrationData);
            self.$tblAfterCycle.draw();
            return this;
        },
        populateProcessList: function (hydrationData) {
            var self = this;
            self.$tblProcessList.clear();
            self.$tblProcessList.rows.add(hydrationData);
            self.$tblProcessList.draw();
            $('body .hastimepicker').timepicker();
            return this;
        },
        setMixerStart: function (data) {
            var self = this;
            return this;
        },
        setupMixerTime: function () {
            var self = this;
            self.templateID = $("#TemplateData").val();
            self.jsonData = { ID: self.templateID };
            self.formAction = '/Transaction/HydrationProcess/GetHourlyCheckingDetails';
            self.sendData().then(function () {
                self.populateHourlyChecking(self.responseData.HourlyProcess);
            });
            return this;
        },
        validateMixerTimeStart: function (hourCounter, minutes, meridian, THourscounter, Timeintervalcounter) {
            var self = this;
            $(".TimeInterval").each(function (e) {
                var self = this;
                var timeInterval = $(this).data('cycle');
                var ID = $(this).data('id');
                var IntervalValue = parseInt($("#TimeIntervalCounter" + Timeintervalcounter).val());
                if (timeInterval === 60) {
                    if (meridian === "PM") {
                        if (hourCounter >= 12) {
                            if (hourCounter === 12) {
                                $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                            }
                            else {
                                var NewHourdata = hourCounter - 12;
                                $("#TimeInterval" + ID + "").timepicker('setTime', NewHourdata + ":" + minutes + " AM");
                                THourscounter++;
                            }
                        }
                        else {
                            $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                        }
                    }
                    else {
                        if (hourCounter >= 12) {
                            if (hourCounter === 12) {
                                $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                            }
                            else {
                                $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                                THourscounter++;
                            }
                        }
                        else {
                            $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                        }
                    }
                }
                else {
                    if (meridian === "PM") {
                        if (minutes >= 60) {
                            if (minutes === 60) {

                                $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                            }
                            else {
                                $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                            }
                        }
                        else {
                            minutes = minutes + timeInterval;
                            if (minutes >= 60) {
                                minutes = minutes - 60;
                                hourCounter++;
                                if (hourCounter >= 12) {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                                }
                                else {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                            else {
                                if (hourCounter >= 12) {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                                }
                                else {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                        }
                    }
                    else if (meridian === "AM") {
                        if (minutes >= 60) {
                            if (minutes === 60) {

                                $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                            }
                            else {
                                $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                            }
                        }
                        else {
                            minutes = minutes + timeInterval;
                            if (minutes >= 60) {
                                minutes = minutes - 60;
                                hourCounter++;
                                if (hourCounter >= 12) {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                                }
                                else {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                            else {
                                if (hourCounter >= 12) {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                                }
                                else {
                                    $("#TimeInterval" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                        }
                    }
                }
                if (timeInterval === 60) {
                    if (IntervalValue === 60) {
                        hourCounter++;
                    }
                }
                else {
                    if (IntervalValue === 60) {
                        hourCounter++;
                    }
                    if (minutes >= 60) {
                        minutes = 0;
                        hourCounter++;
                    }
                }
                Timeintervalcounter++;
            });
            if (self.$HydrationCycleStatus === "edit") {
                var arrhourlyChecking = [];
                $(".hourlytimepicker").each(function (e) {
                    var IntervalID = $(this).data('id');
                    var InvertalValue = $(this).val();
                    var HitTemp = $("#TempCut" + IntervalID).val();
                    var WaterTemp = $("#WaterData" + IntervalID).val();
                    arrhourlyChecking.push({ "IntervalID": IntervalID, "InvertalValue": InvertalValue, "HitTemp": HitTemp, "WaterTemp": WaterTemp });
                });
                self.saveLatestHourlyCheckingData(arrhourlyChecking);
            }
            return this;
        },
        populateEditProcessList: function (hydrationData) {
            var self = this;
            self.$tblProcessList.clear();
            self.$tblProcessList.rows.add(hydrationData);
            self.$tblProcessList.draw();
            $('body .hastimepicker').timepicker();
            return this;
        },
        populateEditHourlyChecking: function (hydrationData, AfterCycle, Type) {
            var self = this;
            var tempArrayList = "";
            var tempFinalArrayList = [];
            var isFound = false;
            var dataFound = true;

            var DataTemp61 = "";
            var DataTemp71 = "";
            var DataTemp81 = "";

            if (Type === "old") {
                DataTemp61 = parseInt(hydrationData[hydrationData.length - 3].HitTemp);
                DataTemp71 = parseInt(hydrationData[hydrationData.length - 2].HitTemp);
                DataTemp81 = parseInt(hydrationData[hydrationData.length - 1].HitTemp);
                for (var i = 0; i < hydrationData.length; i++) {
                    if (i === hydrationData.length - 3) {
                        if (dataFound) {
                            if (DataTemp61 <= 59) {
                                tempArrayList = {
                                    CycleCount: hydrationData[i].CycleCount,
                                    HydrationID: hydrationData[i].HydrationID,
                                    LatestDate: hydrationData[i].LatestDate,
                                    HCounter: hydrationData[i].HCounter,
                                    HitTemp: hydrationData[i].HitTemp,
                                    ID: hydrationData[i].ID,
                                    Interval: hydrationData[i].Interval,
                                    InvertalValue: hydrationData[i].InvertalValue,
                                    WaterTemp: hydrationData[i].WaterTemp,
                                }
                                tempFinalArrayList.push(tempArrayList);
                                isFound = true;
                                dataFound = false;
                            }
                        }

                    }
                    if (i === hydrationData.length - 2) {
                        if (dataFound) {
                            if (DataTemp71 <= 59) {
                                tempArrayList = {
                                    CycleCount: hydrationData[i].CycleCount,
                                    HydrationID: hydrationData[i].HydrationID,
                                    LatestDate: hydrationData[i].LatestDate,
                                    HCounter: hydrationData[i].HCounter,
                                    HitTemp: hydrationData[i].HitTemp,
                                    ID: hydrationData[i].ID,
                                    Interval: hydrationData[i].Interval,
                                    InvertalValue: hydrationData[i].InvertalValue,
                                    WaterTemp: hydrationData[i].WaterTemp,
                                }
                                tempFinalArrayList.push(tempArrayList);
                                isFound = true;
                                dataFound = false;
                            }
                        }

                    }
                    if (i === hydrationData.length - 1) {
                        if (dataFound) {
                            if (DataTemp81 <= 59) {
                                tempArrayList = {
                                    CycleCount: hydrationData[i].CycleCount,
                                    HydrationID: hydrationData[i].HydrationID,
                                    LatestDate: hydrationData[i].LatestDate,
                                    HCounter: hydrationData[i].HCounter,
                                    HitTemp: hydrationData[i].HitTemp,
                                    ID: hydrationData[i].ID,
                                    Interval: hydrationData[i].Interval,
                                    InvertalValue: hydrationData[i].InvertalValue,
                                    WaterTemp: hydrationData[i].WaterTemp,
                                }
                                tempFinalArrayList.push(tempArrayList);
                                isFound = true;
                                dataFound = false;
                            }
                        }
                    }
                    if (!isFound) {
                        tempArrayList = {
                            CycleCount: hydrationData[i].CycleCount,
                            HydrationID: hydrationData[i].HydrationID,
                            LatestDate: hydrationData[i].LatestDate,
                            HCounter: hydrationData[i].HCounter,
                            HitTemp: hydrationData[i].HitTemp,
                            ID: hydrationData[i].ID,
                            Interval: hydrationData[i].Interval,
                            InvertalValue: hydrationData[i].InvertalValue,
                            WaterTemp: hydrationData[i].WaterTemp,
                        }
                        tempFinalArrayList.push(tempArrayList);
                    }
                }
            }
            else {
                for (var i = 0; i < hydrationData.length; i++) {
                    tempArrayList = {
                        CycleCount: hydrationData[i].CycleCount,
                        HydrationID: hydrationData[i].HydrationID,
                        LatestDate: hydrationData[i].LatestDate,
                        HCounter: hydrationData[i].HCounter,
                        HitTemp: hydrationData[i].HitTemp,
                        ID: hydrationData[i].ID,
                        Interval: hydrationData[i].Interval,
                        InvertalValue: hydrationData[i].InvertalValue,
                        WaterTemp: hydrationData[i].WaterTemp,
                    }
                    tempFinalArrayList.push(tempArrayList);
                }
            }



            self.$tblHourlyChecking.clear();
            self.$tblHourlyChecking.rows.add(tempFinalArrayList);
            self.$tblHourlyChecking.draw();
            var tbldata = self.getDataTableData(self.$tblHourlyChecking.rows().data());

            var DataTemp8 = parseInt(tbldata[tbldata.length - 1].HitTemp);


            if (DataTemp8 <= 59) {
                self.$tblAfterCycle.clear();
                self.$tblAfterCycle.rows.add(AfterCycle);
                self.$tblAfterCycle.draw();
                var rowTime = tbldata[tbldata.length - 1].InvertalValue;
                self.$AfterCheckStartTime = rowTime;
                var hourCounters = rowTime.split(':')[0];
                var hourCounter = parseInt(hourCounters);
                var minutes = parseInt(rowTime.split(':')[1].split(' ')[0]);
                var meridian = rowTime.split(' ')[1];
                var THourscounter = 1;
                var Timeintervalcounter = 2;
                self.validateAFCTimeStart(hourCounter, minutes, meridian, THourscounter, Timeintervalcounter);
                var tbldataAFterCycle = self.getDataTableData(self.$tblAfterCycle.rows().data());
                self.MixingTimeFinishedData = tbldataAFterCycle[tbldataAFterCycle.length - (tbldataAFterCycle.length - 1)].InvertalValue;
                for (var ddd = 0; ddd < tbldataAFterCycle.length; ddd++) {
                    var tempData = parseInt(tbldataAFterCycle[ddd].HitTemp);
                    if (tempData <= 59) {
                        $("#ResultData" + tbldataAFterCycle[ddd].ID).val("OK")
                    }
                    else {
                        $("#ResultData" + tbldataAFterCycle[ddd].ID).val("NG")
                    }
                }
                //ResultData1
            }
            else {
                self.$tblAfterCycle.clear();
                self.$tblAfterCycle.rows.add(AfterCycle);
                self.$tblAfterCycle.draw();
                var tbldataAFterCycle = self.getDataTableData(self.$tblAfterCycle.rows().data());
                self.MixingTimeFinishedData = tbldataAFterCycle[tbldataAFterCycle.length - (tbldataAFterCycle.length - 1)].InvertalValue;
                for (var ddd = 0; ddd < tbldataAFterCycle.length; ddd++) {
                    var tempData = parseInt(tbldataAFterCycle[ddd].HitTemp);
                    if (tempData <= 59) {
                        $("#ResultData" + tbldataAFterCycle[ddd].ID).val("OK")
                    }
                    else {
                        $("#ResultData" + tbldataAFterCycle[ddd].ID).val("NG")
                    }
                }
            }


            return this;
        },
        populateEditAfterCycle: function (hydrationData) {
            var self = this;
            self.$tblAfterCycle.clear();
            self.$tblAfterCycle.rows.add(hydrationData);
            self.$tblAfterCycle.draw();
            return this;
        },
        populateEditSummary: function (hydrationData, CurrentProcesDate, HydrationHeaderData) {
            var self = this;
            var tbldataProcess = self.getDataTableData(self.$tblProcessList.rows().data());
            var tbldataAfterCycle = self.getDataTableData(self.$tblAfterCycle.rows().data());
            var ProcessTime = "";
            for (var i = 0; i < tbldataProcess.length; i++) {
                if (tbldataProcess[i].ProcessValue === "Mixing Time Start") {
                    ProcessTime = tbldataProcess[i].ProcessDataValue;
                }
            }
            var time = hydrationData.UnloadingTime;
            var hours = Number(time.match(/^(\d+)/)[1]);
            var minutes = Number(time.match(/:(\d+)/)[1]);
            var AMPM = time.match(/\s(.*)$/)[1];
            if (AMPM == "PM" && hours < 12) hours = hours + 12;
            if (AMPM == "AM" && hours == 12) hours = hours - 12;
            var sHours = hours.toString();
            var sMinutes = minutes.toString();
            if (hours < 10) sHours = "0" + sHours;
            if (minutes < 10) sMinutes = "0" + sMinutes;

            var AfterCycle = $("#TimeIntervalAC" + tbldataAfterCycle[tbldataAfterCycle.length - 1].ID).val().split(' ')[0];
            var FinalAfterCycle = ("0" + AfterCycle.split(':')[0]).slice(-2) + ':' + AfterCycle.split(':')[1];
            var FinalProcessTime = sHours + ":" + sMinutes;

            var startTime = $F(HydrationHeaderData.ProcessDate).formatDate("mm/dd/yyyy") + ' ' + FinalProcessTime;
            var endTime = $F(CurrentProcesDate === "" ? HydrationHeaderData.ProcessDate : CurrentProcesDate).formatDate("mm/dd/yyyy") + ' ' + FinalAfterCycle;

            startTime = new Date(startTime);
            endTime = new Date(endTime);

            var diff = endTime - startTime;

            var diffSeconds = diff / 1000;
            var HH = Math.floor(diffSeconds / 3600);
            var MM = Math.floor(diffSeconds % 3600) / 60;

            var formatted = ((HH < 10) ? ("0" + HH) : HH) + ":" + ((MM < 10) ? ("0" + MM) : MM)



            var tbldataHourlyCheck = self.getDataTableData(self.$tblHourlyChecking.rows().data());
            var TotCalc = 0;
            for (var isd = 0; isd < tbldataHourlyCheck.length; isd++) {
                if (isd <= 4) {
                    TotCalc += parseInt(tbldataHourlyCheck[isd].WaterTemp);
                }
            }
            var DataTemp8 = parseInt(tbldataHourlyCheck[tbldataHourlyCheck.length - 1].HitTemp);

            var _DataTemp8 = parseInt(tbldataHourlyCheck[tbldataHourlyCheck.length - 1].WaterTemp);

            if (DataTemp8 <= 59) {
                TotCalc += _DataTemp8;
            }
            else {
                TotCalc += _DataTemp8;
            }


            var WaterData = 0;
            if ($.isNumeric(TotCalc)) {
                WaterData = TotCalc;
            }
            else {
                WaterData = 0;
            }





            var InputData = self.TotalInputData;
            var TotalOutputResult = hydrationData.OutputWeight / InputData;
            $("#UnloadingTime").val(hydrationData.UnloadingTime);

            $("#MixingTimeFinished").timepicker();
            $("#OutputWeight").val(hydrationData.OutputWeight);
            $("#TotalCycleTime").val(formatted);
            $("#TotalWaterInput").val(WaterData);
            $("#OutputResult").val(parseFloat(TotalOutputResult).toFixed(2));
            return this;
        },
        validateAFCTimeStart: function (hourCounter, minutes, meridian, THourscounter, Timeintervalcounter) {
            var self = this;
            $(".TimeIntervalAC").each(function (e) {
                var self = this;
                var timeInterval = $(this).data('cycle');
                var ID = $(this).data('id');
                var IntervalValue = timeInterval;
                if (timeInterval === 60) {
                    if (meridian === "PM") {
                        if (hourCounter >= 12) {
                            if (hourCounter === 12) {
                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                            }
                            else {
                                var NewHourdata = hourCounter - 12;
                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', NewHourdata + ":" + minutes + " AM");
                                THourscounter++;
                                //$("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                                //THourscounter++;
                            }
                        }
                        else {
                            $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                        }
                    }
                    else {
                        if (hourCounter >= 12) {
                            if (hourCounter === 12) {
                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                            }
                            else {
                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                                THourscounter++;
                            }
                        }
                        else {
                            $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                        }
                    }
                }
                else {
                    if (meridian === "PM") {
                        if (minutes >= 60) {
                            if (minutes === 60) {

                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                            }
                            else {
                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                            }
                        }
                        else {
                            minutes = minutes + timeInterval;
                            if (minutes >= 60) {
                                minutes = minutes - 60;
                                hourCounter++;
                                if (hourCounter >= 12) {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                                }
                                else {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                            else {
                                if (hourCounter >= 12) {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                                }
                                else {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                        }
                    }
                    else if (meridian === "AM") {
                        if (minutes >= 60) {
                            if (minutes === 60) {

                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                            }
                            else {
                                $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " AM");
                            }
                        }
                        else {
                            minutes = minutes + timeInterval;
                            if (minutes >= 60) {
                                minutes = minutes - 60;
                                hourCounter++;
                                if (hourCounter >= 12) {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                                }
                                else {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                            else {
                                if (hourCounter >= 12) {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " PM");
                                }
                                else {
                                    $("#TimeIntervalAC" + ID + "").timepicker('setTime', hourCounter + ":" + minutes + " " + meridian);
                                }
                            }
                        }
                    }
                }
                if (timeInterval === 60) {
                    if (IntervalValue === 60) {
                        hourCounter++;
                    }
                }
                else {
                    if (IntervalValue === 60) {
                        hourCounter++;
                    }
                    if (minutes >= 60) {
                        minutes = 0;
                        hourCounter++;
                    }
                }
                Timeintervalcounter++;
            });
            return this;
        },
        validateAllFields: function () {
            var self = this;
            var isValid = 0;
            $(".processlistdata").each(function (e) {
                var dataValue = $(this).val();
                if (dataValue === "") {
                    isValid++;
                }
            });
            $(".TimeInterval").each(function (e) {
                var dataValue = $(this).val();
                if (dataValue === "") {
                    isValid++;
                }
            });
            $(".TempCut").each(function (e) {
                var dataValue = $(this).val();
                if (dataValue === "") {
                    isValid++;
                }
            });
            $(".WaterData").each(function (e) {
                var dataValue = $(this).val();
                if (dataValue === "") {
                    isValid++;
                }
            });
            $(".TimeIntervalAC").each(function (e) {
                var dataValue = $(this).val();
                if (dataValue === "") {
                    isValid++;
                }
            });
            $(".TempCutAC").each(function (e) {
                var dataValue = $(this).val();
                if (dataValue === "") {
                    isValid++;
                }
            });
            $(".ResultData").each(function (e) {
                var dataValue = $(this).val();
                if (dataValue === "") {
                    isValid++;
                }
            });
            var UnloadingTime = $("#UnloadingTime").val();
            var MixingTimeFinished = $("#MixingTimeFinished").val();
            var OutputWeight = $("#OutputWeight").val();
            var TotalCycleTime = $("#TotalCycleTime").val();
            var TotalWaterInput = $("#TotalWaterInput").val();
            var OutputResult = $("#OutputResult").val();
            if (UnloadingTime === "") {
                isValid++;
            }
            if (MixingTimeFinished === "") {
                isValid++;
            }
            if (OutputWeight === "") {
                isValid++;
            }
            if (TotalCycleTime === "") {
                isValid++;
            }
            if (TotalWaterInput === "") {
                isValid++;
            }
            if (OutputResult === "") {
                isValid++;
            }
            self.completedHydration();
            return this;
        },
        completedHydration: function () {
            var self = this;
            self.hydrationID = self.$tblHydrationProcess.rows({ selected: true }).data()[0].ID;
            self.formAction = '/Transaction/HydrationProcess/CompletedHydration';
            self.jsonData = { ID: self.hydrationID };
            self.sendData().then(function () {
                self.saveCompletedData();
            });
            return this;
        },
        tConvert: function (time) {
            var self = this;
            // Check correct time format and split into components
            time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

            if (time.length > 1) { // If time format correct
                time = time.slice(1);  // Remove full string match value
                time[0] = +time[0] % 12 || 12; // Adjust hours
            }
            return time.join(''); // return adjusted time or original string
        },
        getHourlyCheckingDefaultList: function () {
            var self = this;
            self.templateID = $("#TemplateData").val();
            self.jsonData = { ID: self.templateID };
            self.formAction = '/Transaction/HydrationProcess/GetHourlyCheckingDetails';
            self.sendData().then(function () {
                self.populateDefaulyHourlyChecking(self.responseData.HourlyProcess);
            });
            return this;
        },
        populateDefaulyHourlyChecking: function (hydrationData) {
            var self = this;
            self.$tblHourlyChecking.clear();
            self.$tblHourlyChecking.rows.add(hydrationData);
            self.$tblHourlyChecking.draw();
            return this;
        },
        automaticComputeTime: function () {
            var self = this;
            var LatestTimeStart = self.LatestMixingTimeStart;
            var hourCounter = parseInt(LatestTimeStart.split(':')[0]) + 1;
            var minutes = parseInt(LatestTimeStart.split(':')[1].split(' ')[0]);
            var meridian = LatestTimeStart.split(' ')[1];
            var THourscounter = 1;
            var Timeintervalcounter = 2;
            self.validateMixerTimeStart(hourCounter, minutes, meridian, THourscounter, Timeintervalcounter);
            return this;
        },
        retrieveDataHydration: function () {
            var self = this;
            self.hydrationID = self.$tblHydrationProcess.rows({ selected: true }).data()[0].ID;
            self.templateID = $("#TemplateData").val();
            self.jsonData = { ID: self.hydrationID, TemplateID: self.templateID };
            self.formAction = '/Transaction/HydrationProcess/GetHydrationDetails';
            self.sendData().then(function () {
                var Type = 'new';


                self.populateEditHourlyChecking(self.responseData.HydrationHourlyData, self.responseData.HydrationAfterCycleData, Type);
            });
            return this;
        },
        retrieveSaveRemoveData: function () {
            var self = this;
            self.TemporarySaveHourlyChecking = [];
            self.TemporarySaveAfterFinishedCycle = [];
            //GetCurrentData of Hourly Checking and After Cycle Data List
            var AfterCycleDataList = self.getDataTableData(self.$tblAfterCycle.rows().data());
            var HourlyCheckingDataList = self.getDataTableData(self.$tblHourlyChecking.rows().data());
            self.TemporarySaveHourlyChecking.push(HourlyCheckingDataList);
            self.TemporarySaveAfterFinishedCycle.push(AfterCycleDataList);

            self.jsonData = { HourlyCheckingList: self.TemporarySaveHourlyChecking[0], AfterCycleList: self.TemporarySaveAfterFinishedCycle[0] };
            self.formAction = '/Transaction/HydrationProcess/SaveCurrentListData';
            self.sendData().then(function () {
                self.CurrentProcessDate = HourlyCheckingDataList[HourlyCheckingDataList.length - 1].LatestDate;
                self.TemporarySaveHourlyChecking = [];
                self.TemporarySaveAfterFinishedCycle = [];
                self.$HydrationCycleStatus = "edit";
                self.getHourlyCheckingDefaultList();
            });
            return this;
        },
        saveLatestHourlyCheckingData: function (HourlyCheckList) {
            var self = this;
            self.jsonData = { HourlyCheckList: HourlyCheckList, HydrationID: self.GlobalHydrationID, CurrentDate: self.CurrentProcessDate };
            self.formAction = '/Transaction/HydrationProcess/SaveLatestHourlyCheckData';
            self.sendData().then(function () {
                self.$HydrationCycleStatus = "";
                self.jsonData = { ID: self.GlobalHydrationID, TemplateID: self.templateID, ProcessDate: self.CurrentProcessDate };
                self.formAction = '/Transaction/HydrationProcess/RetrieveUpdatedList';
                self.sendData().then(function () {
                    var Type = 'new';
                    self.populateEditHourlyChecking(self.responseData.HydrationHourlyData, self.responseData.HydrationAfterCycleData, Type);
                });
            });
            return this;
        },
        retrieveTransactionHistory: function () {
            var self = this;
            self.jsonData = { HydrationID: self.GlobalHydrationID };
            self.formAction = '/Transaction/HydrationProcess/GetTransactionHistory';
            self.sendData().then(function () {
                var ListTransaction = self.responseData.TransactionResultList;
                var ListHourlyChecking = self.responseData.HourlyCheckingTransactionResultListData;
                var ListAfterCycle = self.responseData.AfterCycleTransactionResultListData;
                self.HourlyCheckingHistoryList = [];
                self.AfterCycleHistoryList = [];
                self.$tblHourlyCheckingHistory.clear();
                self.$tblHourlyCheckingHistory.draw();
                self.$tblAfterCycleHistory.clear();
                self.$tblAfterCycleHistory.draw();
                $("#Drawtable").empty();
                if (ListTransaction.length >= 2) {
                    var vhtml = "";
                    vhtml += "<div class='dynamicpagination' data-take='1' data-total-count=" + ListTransaction.length + "></div>";
                    $("#Drawtable").html(vhtml);

                    var TTempHourlyCheckListData = [];
                    var tTempAfterCycleListData = [];

                    for (var yi = 0; yi < ListHourlyChecking.length; yi++) {
                        if (ListHourlyChecking[yi].DataCycleCounter === 2) {
                            TTempHourlyCheckListData.push(ListHourlyChecking[yi]);
                        }
                    }
                    for (var ggi = 0; ggi < ListAfterCycle.length; ggi++) {
                        if (ListAfterCycle[ggi].DataCycleCounter === 2) {
                            tTempAfterCycleListData.push(ListAfterCycle[ggi]);
                        }
                    }
                    self.$tblHourlyCheckingHistory.clear();
                    self.$tblHourlyCheckingHistory.rows.add(TTempHourlyCheckListData);
                    self.$tblHourlyCheckingHistory.draw();
                    self.$tblAfterCycleHistory.clear();
                    self.$tblAfterCycleHistory.rows.add(tTempAfterCycleListData);
                    self.$tblAfterCycleHistory.draw();

                    $('.dynamicpagination').pajinatify({

                        onChange: function (currentPage) {
                            var CurrentHistoryPage = (currentPage + 1);
                            var TempHourlyCheckListData = [];
                            var TempAfterCycleListData = [];

                            for (var i = 0; i < ListHourlyChecking.length; i++) {
                                if (ListHourlyChecking[i].DataCycleCounter === CurrentHistoryPage) {
                                    TempHourlyCheckListData.push(ListHourlyChecking[i]);
                                }
                            }
                            for (var gi = 0; gi < ListAfterCycle.length; gi++) {
                                if (ListAfterCycle[gi].DataCycleCounter === CurrentHistoryPage) {
                                    TempAfterCycleListData.push(ListAfterCycle[gi]);
                                }
                            }
                            self.$tblHourlyCheckingHistory.clear();
                            self.$tblHourlyCheckingHistory.rows.add(TempHourlyCheckListData);
                            self.$tblHourlyCheckingHistory.draw();
                            self.$tblAfterCycleHistory.clear();
                            self.$tblAfterCycleHistory.rows.add(TempAfterCycleListData);
                            self.$tblAfterCycleHistory.draw();

                        },
                        debug: 1
                    });
                    self.HourlyCheckingHistoryList.push(ListHourlyChecking);
                    self.AfterCycleHistoryList.push(ListAfterCycle);
                }
                else {

                    self.$tblHourlyCheckingHistory.clear();
                    self.$tblHourlyCheckingHistory.rows.add(ListHourlyChecking);
                    self.$tblHourlyCheckingHistory.draw();
                    self.$tblAfterCycleHistory.clear();
                    self.$tblAfterCycleHistory.rows.add(ListAfterCycle);
                    self.$tblAfterCycleHistory.draw();

                }

            });



            $("#mdlTransactionHistory").modal('show');
            return this;
        },
        saveCompletedData: function () {
            var self = this;
            var arrprocesslist = [];
            var arrhourlyChecking = [];
            var arrafterfinished = [];
            var arrhydrationdata = "";
            var arrhydrationSummary = "";

            var mixerHiddenValue = $("#MixerNoHiddenData").val();
            var mixerValue = $("#MixerNo").val();
            var cycleHiddenValue = $("#CycleHiddenData").val();
            var cycleValue = $("#Cycle").val();
            var processDate = $("#ProcessDate").val();
            var staffHiddenValue = $("#ProductionStaffHiddenData").val();
            var staffValue = $("#ProductionStaff").val();
            var idValue = $("#HydrationID").val();
            var remarksValue = $("#Remarks").val();
            var templateValue = $("#TemplateData").val();

            var unloadingtimeValue = $("#UnloadingTime").val();
            var MixingTimeFinishedValue = $("#MixingTimeFinished").val();
            var outputweightValue = $("#OutputWeight").val();
            var totalcycleValue = $("#TotalCycleTime").val();
            var totalwaterValue = $("#TotalWaterInput").val();
            var outputresultValue = $("#OutputResult").val();

            $(".processlistdata").each(function (e) {
                var ProcessID = $(this).data('cycle');
                var dataValue = $(this).val();
                arrprocesslist.push({ "ProcessID": ProcessID, "ProcessValue": dataValue });
            });
            $(".hourlytimepicker").each(function (e) {
                var IntervalID = $(this).data('id');
                var InvertalValue = $(this).val();
                var HitTemp = $("#TempCut" + IntervalID).val();
                var WaterTemp = $("#WaterData" + IntervalID).val();
                arrhourlyChecking.push({ "IntervalID": IntervalID, "InvertalValue": InvertalValue, "HitTemp": HitTemp, "WaterTemp": WaterTemp });
            });
            $(".TimeIntervalAC").each(function (e) {
                var IntervalID = $(this).data('id');
                var InvertalValue = $(this).val();
                var TempCut = $("#TempCutAC" + IntervalID).val();
                var Judgement = $("#ResultData" + IntervalID).val();
                arrafterfinished.push({ "IntervalID": IntervalID, "InvertalValue": InvertalValue, "HitTemp": TempCut, "Judgement": Judgement });
            });
            arrhydrationdata = {
                ID: idValue,
                MixerNo: mixerValue,
                Cycle: cycleValue,
                ProcessDate: processDate,
                ProductionStaff: staffValue,
                Remarks: remarksValue,
                TemplateID: templateValue
            };

            arrhydrationSummary = {
                UnloadingTime: unloadingtimeValue,
                MixingTimeFinished: MixingTimeFinishedValue,
                OutputWeight: outputweightValue == "" ? "0" : outputweightValue,
                TotalCycleTime: totalcycleValue,
                TotalWaterInput: totalwaterValue == "" ? "0" : totalwaterValue,
                OutputResult: outputresultValue
            };

            self.saveHydration(arrprocesslist, arrhourlyChecking, arrafterfinished, arrhydrationdata, arrhydrationSummary);
            return this;
        }
    };
    HydrationProcess.init.prototype = $.extend(HydrationProcess.prototype, $D.init.prototype);
    HydrationProcess.init.prototype = HydrationProcess.prototype;
    $(document).ready(function () {
        var Hydration = HydrationProcess();
        Hydration.drawDatatables();
        $("#btnAddHydrationProcess").click(function () {
            $("#mdlHydration").modal('show');
        });
        $("#mdlHydration").on('shown.bs.modal', function () {
            $('#ProductionStaff').select2({
                ajax: {
                    url: "/General/MySQLGetSelect2Data",
                    data: function (params) {
                        var d = {
                            q: params.term,
                            id: 'ID',
                            text: 'UserData',
                            table: 'mUser',
                            db: 'SHIN-ETSU-MYSQL',
                            query: "select concat(FirstName, ' ' , LastName) as UserData , ID from  mUser where IsDeleted = 0",
                            display: 'id&text',
                        }
                        return d;
                    },
                },
                placeholder: "--Please Select--",
                allowClear: true,
            });
            $('#Cycle').select2({
                ajax: {
                    url: "/General/MySQLGetSelect2Data",
                    data: function (params) {
                        var d = {
                            q: params.term,
                            id: 'ID',
                            text: 'Value',
                            table: 'mGeneral',
                            db: 'SHIN-ETSU-MYSQL',
                            query: "SELECT mg.Value,mg.ID FROM mTypes as mt " +
                                " LEFT JOIN mGeneral mg on mg.TypeID = mt.ID " +
                                "where mt.ID = 1 and mg.IsDeleted = 0",
                            display: 'id&text',
                        }
                        return d;
                    },
                },
                placeholder: "--Please Select--",
                allowClear: true,
            });
            $('#MixerNo').select2({
                ajax: {
                    url: "/General/MySQLGetSelect2Data",
                    data: function (params) {
                        var d = {
                            q: params.term,
                            id: 'ID',
                            text: 'MachineName',
                            table: 'mMachine',
                            db: 'SHIN-ETSU-MYSQL',
                            query: "select MachineName , ID from mMachine where IsDeleted = 0 and IsUsed = 0",
                            display: 'id&text',
                        }
                        return d;
                    },
                },
                placeholder: "--Please Select--",
                allowClear: true,
            });
            if (Hydration.$HydrationStatus != "edit") {
                Hydration.getHourlyCheckingList();
            }
        });
        $("#ProcessDate").datepicker({ todayHighlight: true, autoclose: true });
        $("#btnSaveHydration").click(function () {
            $("#frmHydration").submit();
        });
        $("#frmHydration").submit(function (e) {
            e.preventDefault();
            var arrprocesslist = [];
            var arrhourlyChecking = [];
            var arrafterfinished = [];
            var arrhydrationdata = "";
            var arrhydrationSummary = "";

            var mixerHiddenValue = $("#MixerNoHiddenData").val();
            var mixerValue = $("#MixerNo").val();
            var cycleHiddenValue = $("#CycleHiddenData").val();
            var cycleValue = $("#Cycle").val();
            var processDate = $("#ProcessDate").val();
            var staffHiddenValue = $("#ProductionStaffHiddenData").val();
            var staffValue = $("#ProductionStaff").val();
            var idValue = $("#HydrationID").val();
            var remarksValue = $("#Remarks").val();
            var templateValue = $("#TemplateData").val();

            var unloadingtimeValue = $("#UnloadingTime").val();
            var MixingTimeFinishedValue = $("#MixingTimeFinished").val();
            var outputweightValue = $("#OutputWeight").val();
            var totalcycleValue = $("#TotalCycleTime").val();
            var totalwaterValue = $("#TotalWaterInput").val();
            var outputresultValue = $("#OutputResult").val();

            $(".processlistdata").each(function (e) {
                var ProcessID = $(this).data('cycle');
                var dataValue = $(this).val();
                arrprocesslist.push({ "ProcessID": ProcessID, "ProcessValue": dataValue });
            });
            $(".hourlytimepicker").each(function (e) {
                var IntervalID = $(this).data('id');
                var InvertalValue = $(this).val();
                var HitTemp = $("#TempCut" + IntervalID).val();
                var WaterTemp = $("#WaterData" + IntervalID).val();
                arrhourlyChecking.push({ "IntervalID": IntervalID, "InvertalValue": InvertalValue, "HitTemp": HitTemp, "WaterTemp": WaterTemp });
            });
            $(".TimeIntervalAC").each(function (e) {
                var IntervalID = $(this).data('id');
                var InvertalValue = $(this).val();
                var TempCut = $("#TempCutAC" + IntervalID).val();
                var Judgement = $("#ResultData" + IntervalID).val();
                arrafterfinished.push({ "IntervalID": IntervalID, "InvertalValue": InvertalValue, "HitTemp": TempCut, "Judgement": Judgement });
            });
            arrhydrationdata = {
                ID: idValue,
                MixerNo: mixerValue,
                Cycle: cycleValue,
                ProcessDate: processDate,
                ProductionStaff: staffValue,
                Remarks: remarksValue,
                TemplateID: templateValue
            };

            arrhydrationSummary = {
                UnloadingTime: unloadingtimeValue,
                MixingTimeFinished: MixingTimeFinishedValue,
                OutputWeight: outputweightValue == "" ? "0" : outputweightValue,
                TotalCycleTime: totalcycleValue,
                TotalWaterInput: totalwaterValue == "" ? "0" : totalwaterValue,
                OutputResult: outputresultValue
            };
            var mode = $("#btnSaveHydration > span.btnLabel").text().toLowerCase();
            Hydration.msg = "Are you sure you want to " + mode + " this Hydration Process?";
            Hydration.confirmAction().then(function (approve) {
                if (approve)
                    Hydration.saveHydration(arrprocesslist, arrhourlyChecking, arrafterfinished, arrhydrationdata, arrhydrationSummary);
            });
        });
        $('#btnEditHydrationProcess').click(function () {
            Hydration.$HydrationStatus = "edit";
            Hydration.editHydration();
        });
        $("#btnDeleteHydrationProcess").click(function () {
            Hydration.msg = "Are you sure you want to delete this Hydration Process?";
            Hydration.confirmAction().then(function (approve) {
                if (approve)
                    Hydration.deleteHydration();
            });
        });
        $("body").timepicker().on('hide.timepicker', '.MixerTimeStart', function (e) {
            Hydration.$MixerStartTime = e.time.value;
            var hourCounter = e.time.hours + 1;
            var minutes = e.time.minutes;
            var meridian = e.time.meridian;
            var THourscounter = 1;
            var Timeintervalcounter = 2;
            Hydration.validateMixerTimeStart(hourCounter, minutes, meridian, THourscounter, Timeintervalcounter);
        });
        $("body").on('change', '.TempCut', function () {
            var dataVal = parseInt($(this).val());
            var rowID = $(this).data('id');
            var rowTime = $("#TimeInterval" + rowID + "").val();
            Hydration.$AfterCheckStartTime = rowTime;
            var hourCounters = rowTime.split(':')[0];
            var hourCounter = parseInt(hourCounters);
            var minutes = parseInt(rowTime.split(':')[1].split(' ')[0]);
            var meridian = rowTime.split(' ')[1];
            var THourscounter = 1;
            var Timeintervalcounter = 2;
            if (dataVal === 55) {

                Hydration.validateAFCTimeStart(hourCounter, minutes, meridian, THourscounter, Timeintervalcounter);
            }
        });
        $("#btnCompletedData").click(function () {
            Hydration.msg = "Are you sure you want to Complete the status of this Hydration Process?";
            Hydration.confirmAction().then(function (approve) {
                if (approve)
                    Hydration.validateAllFields();
            });
        });
        $("#btnUpClosedMdl,#btnCancelHydration").click(function () {
            if (Hydration.$HydrationStatus === "edit") {
                Hydration.msg = "Are you sure you want to close the dialog? Unsaved data will be lost.";
                Hydration.confirmAction().then(function (approve) {
                    if (approve)
                        Hydration.cancelHydrationForm();
                    CUI.setDatatableMaxHeight();

                });
            }
            else {
                Hydration.cancelHydrationForm();
                CUI.setDatatableMaxHeight();
            }

        });
        $("#btnShowTransaction").click(function () {
            Hydration.retrieveTransactionHistory();
        });
        $("#btnUpClosedMdlHistory,#btnCancelHydrationHistory").click(function () {
            $("#mdlTransactionHistory").modal('hide');
        });
        Hydration.$tblProcessList.on('draw.dt', function () {
            if (Hydration.$HydrationStatus === "edit") {
                var tbldata = Hydration.getDataTableData(Hydration.$tblProcessList.rows().data());
                var hydrationprocessLength = tbldata.length;
                var counterLoop = 0;
                for (var i = 0; i < hydrationprocessLength; i++) {
                    if (tbldata[counterLoop].Datatype == "time") {
                        if (tbldata[counterLoop].ProcessID === 10) {
                            $("#MixerTimeStart").timepicker('setTime', tbldata[counterLoop].ProcessDataValue);
                        }
                        else {
                            $("#ProcessList" + tbldata[counterLoop].ID + "").timepicker('setTime', tbldata[counterLoop].ProcessDataValue);
                        }
                    }
                    counterLoop++;
                }
            }
            $(".IsDate").datepicker({ todayHighlight: true, autoclose: true });
        });
        Hydration.$tblHourlyChecking.on('draw.dt', function () {
            if (Hydration.$HydrationStatus === "edit") {
                var tbldata = Hydration.getDataTableData(Hydration.$tblHourlyChecking.rows().data());
                var counterLoop = 0;
                for (var i = 0; i < tbldata.length; i++) {
                    $("#TimeInterval" + tbldata[counterLoop].ID + "").timepicker('setTime', tbldata[counterLoop].InvertalValue);
                    counterLoop++;
                }
                if (Hydration.$HydrationCycleStatus === "edit") {
                    Hydration.automaticComputeTime();
                }
                if (Hydration.iSGetHourlyCheckMainListData) {
                    Hydration.HourlyCheckMainListData.push(tbldata);
                    Hydration.iSGetHourlyCheckMainListData = false;
                }
            }

        });
        Hydration.$tblAfterCycle.on('draw.dt', function () {
            if (Hydration.$HydrationStatus === "edit") {
                var tbldata = Hydration.getDataTableData(Hydration.$tblAfterCycle.rows().data());
                var counterLoop = 0;
                var JudgementCounter = 1;
                var isFound = false;
                var NGTime = "";
                for (var i = 0; i < tbldata.length; i++) {
                    $("#TimeIntervalAC" + tbldata[counterLoop].ID + "").timepicker('setTime', tbldata[counterLoop].InvertalValue);
                    if (tbldata[counterLoop].Judgement === "NG") {
                        if (JudgementCounter === 1) {
                            isFound = true;
                            Hydration.LatestMixingTimeStart = tbldata[counterLoop].ConvertedTime;
                            if (Hydration.IsSavedData) {
                                Hydration.retrieveSaveRemoveData();
                            }
                        }
                        JudgementCounter++;
                    }
                    else {
                        if (!isFound) {
                            JudgementCounter = 1;
                        }
                    }
                    counterLoop++;
                }
                if (!isFound) {
                    if (tbldata.length === 1) {
                        $("#MixingTimeFinished").timepicker('setTime', tbldata[0].InvertalValue);
                    }
                    else if (tbldata.length === 2) {
                        $("#MixingTimeFinished").timepicker('setTime', tbldata[1].InvertalValue);
                    }
                    else {
                        $("#MixingTimeFinished").timepicker('setTime', tbldata[tbldata.length - 3].InvertalValue);
                    }

                }
            }
        });
        Hydration.$tblHydrationProcess.on('draw.dt', function () {
            CUI.dataTableID = "#tblHydrationProcess";
            CUI.setDatatableMaxHeightFixed();
        });
        Hydration.$tblHydrationProcess.on('select', function (e, dt, type, indexes) {
            $('#btnEditHydrationProcess').removeAttr("disabled");
            $('#btnDeleteHydrationProcess').removeAttr("disabled");
        });
        Hydration.$tblHydrationProcess.on('deselect', function (e, dt, type, indexes) {
            $('#btnEditHydrationProcess').attr("disabled", "disabled");
            $('#btnDeleteHydrationProcess').attr("disabled", "disabled");
        });
        Hydration.$tblHourlyCheckingHistory.on('draw.dt', function () {
            CUI.dataTableID = "#tblHourlyCheckingHistory";
            CUI.setDatatableMaxHeightFixed();
        });
        Hydration.$tblAfterCycleHistory.on('draw.dt', function () {
            CUI.dataTableID = "#tblAfterCycleHistory";
            CUI.setDatatableMaxHeightFixed();
        });
    });
})();
